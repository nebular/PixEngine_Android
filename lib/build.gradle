apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

ext.libName = "pixFu_android"
ext.libVersion = "1.0.1"

def platformVersion = 24      // openGLES 3.2 min api level
// def platformVersion = 18    //openGLES 3 min api leve
// def platformVersion = 12    //openGLES 2 min api levedl

android {
    signingConfigs {
        release {
            storeFile file('/Volumes/git.root/ks/funqkeystore')
            storePassword 'Mimi6300'
            keyAlias = 'funq'
            keyPassword 'Mimi6300'
        }
    }
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion "${platformVersion}"
        targetSdkVersion 28
        externalNativeBuild {
            cmake {
                arguments '-DANDROID_STL=c++_static'
                targets 'pixFu', 'pixFu_launcher'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled = false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                          'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    externalNativeBuild {
        cmake {
            version '3.10.2'
            path 'src/main/cpp/CMakeLists.txt'
        }
    }

}

// Pack header file ss into /res/raw

task packSoHeaders(type: Zip) {
    println 'Packing header files ....'
    archiveName "pixfu_headers.zip"
    destinationDir(file("${project.rootDir}/${project.name}/src/main/res/raw/"))
    from ("${project.rootDir}/${project.name}/src/main/cpp/lib/pixFu/src/core/headers") {
        include "*.hpp"
        into "core"
    }

    from ("${project.rootDir}/${project.name}/src/main/cpp/lib/pixFu/src/core/headers") {
        include "*.h"
        into "core"
    }
    from ("${project.rootDir}/${project.name}/src/main/cpp/lib/pixFu/src/support") {
        include "*.hpp"
        into "support"
    }
    from ("${project.rootDir}/${project.name}/src/main/cpp/lib/pixFu/src/input/headers") {
        include "*.hpp"
        into "input"
    }
    from ("${project.rootDir}/${project.name}/src/main/cpp/lib/pixFu/src/items/headers") {
        include "*.hpp"
        into "items"
    }
    from ("${project.rootDir}/${project.name}/src/main/cpp/lib/pixFu/src/thirdparty/glm") {
        include "*.hpp"
        into "glm"
    }
    from ("${project.rootDir}/${project.name}/src/main/cpp/lib/pixFu/src/thirdparty/glm/ext") {
        include "*.hpp"
        into "glm/ext"
    }
    from ("${project.rootDir}/${project.name}/src/main/cpp/lib/pixFu/src/thirdparty/glm/gtc") {
        include "*.hpp"
        into "glm/gtc"
    }
    from ("${project.rootDir}/${project.name}/src/main/cpp/lib/pixFu/src/thirdparty/glm/gtx") {
        include "*.hpp"
        into "glm/gtx"
    }
    from ("${project.rootDir}/${project.name}/src/main/cpp/lib/pixFu/src/thirdparty/glm/simd") {
        include "*.hpp"
        into "glm/simd"
    }

    from ("${project.rootDir}/${project.name}/src/main/cpp/lib/pixFu_Extensions/World/headers") {
        include "*.hpp"
        into "ext/world"
    }

    from ("${project.rootDir}/${project.name}/src/main/cpp/lib/pixFu_Extensions/Sprites/headers") {
        include "*.hpp"
        into "ext/sprites"
    }

    from ("${project.rootDir}/${project.name}/src/main/cpp/lib/pixFu/src/arch/android") {
        include "*.h"
        include "*.hpp"
        into "arch/android"
    }
    from ("${project.rootDir}/${project.name}/src/main/cpp/lib/pixFu/src/arch/android/plugins") {
        include "*.h"
        into "arch/android/plugins"
    }
    from ("${project.rootDir}/${project.name}/src/main/cpp/lib/pixFu/src/arch/android/input") {
        include "*.hpp"
        into "input"
    }

    from ("${project.rootDir}/${project.name}/src/main/cpp/lib/pixFu/src/arch/android/libpng/jni") {
        include "*.h"
        into "arch/android/libpng"
    }
}

task copyAAR(type: Copy) {
    from('build/outputs/aar')
    into("${project.rootDir}/releases")
    include(project.name + '-debug.aar')
    rename (project.name + "-debug.aar", "${libName}.aar")
}
task releaseAAR(type: Copy) {
    from('build/outputs/aar')
    into("${project.rootDir}/releases")
    include(project.name + '-release.aar')
    rename (project.name + "-release.aar", "${libName}.aar")
}

task deployAAR(type: Copy) {
    from('build/outputs/aar')
    into("${project.rootDir}/releases")
    include(project.name + '-debug.aar')
    rename (project.name + "-debug.aar", "${libName}-${libVersion}-debug.aar")
    include(project.name + '-release.aar')
    rename (project.name + "-release.aar", "${libName}-${libVersion}-release.aar")
}

preBuild.dependsOn packSoHeaders

// copyAAR.dependsOn assembleDebug